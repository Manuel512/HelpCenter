//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HelpCenter.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HelpCenter2Entities : DbContext
    {
        public HelpCenter2Entities()
            : base("name=HelpCenter2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int DeleteVideo(Nullable<int> video_id)
        {
            var video_idParameter = video_id.HasValue ?
                new ObjectParameter("Video_id", video_id) :
                new ObjectParameter("Video_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVideo", video_idParameter);
        }
    
        public virtual ObjectResult<sp_GetVideos_Result> GetVideos(Nullable<int> video_id)
        {
            var video_idParameter = video_id.HasValue ?
                new ObjectParameter("Video_id", video_id) :
                new ObjectParameter("Video_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetVideos_Result>("GetVideos", video_idParameter);
        }
    
        public virtual int NewVideo(string name, Nullable<int> user)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewVideo", nameParameter, userParameter);
        }
    
        public virtual int UpdateVideo(Nullable<int> video_id, string name, Nullable<int> user)
        {
            var video_idParameter = video_id.HasValue ?
                new ObjectParameter("Video_id", video_id) :
                new ObjectParameter("Video_id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateVideo", video_idParameter, nameParameter, userParameter);
        }
    
        public virtual int DeleteImage(Nullable<int> image_id)
        {
            var image_idParameter = image_id.HasValue ?
                new ObjectParameter("Image_id", image_id) :
                new ObjectParameter("Image_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteImage", image_idParameter);
        }
    
        public virtual ObjectResult<sp_GetImages_Result> GetImages(Nullable<int> image_id)
        {
            var image_idParameter = image_id.HasValue ?
                new ObjectParameter("Image_id", image_id) :
                new ObjectParameter("Image_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetImages_Result>("GetImages", image_idParameter);
        }
    
        public virtual int NewImage(string name, Nullable<int> user)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewImage", nameParameter, userParameter);
        }
    
        public virtual int UpdateImage(Nullable<int> image_id, string name, Nullable<int> user)
        {
            var image_idParameter = image_id.HasValue ?
                new ObjectParameter("Image_id", image_id) :
                new ObjectParameter("Image_id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateImage", image_idParameter, nameParameter, userParameter);
        }
    
        public virtual ObjectResult<sp_GetModules_Result> GetModules(Nullable<int> module_id)
        {
            var module_idParameter = module_id.HasValue ?
                new ObjectParameter("Module_id", module_id) :
                new ObjectParameter("Module_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetModules_Result>("GetModules", module_idParameter);
        }
    
        public virtual ObjectResult<sp_GetSections_Result> GetSections(Nullable<int> section_id, Nullable<bool> active_only, Nullable<bool> ordered)
        {
            var section_idParameter = section_id.HasValue ?
                new ObjectParameter("Section_id", section_id) :
                new ObjectParameter("Section_id", typeof(int));
    
            var active_onlyParameter = active_only.HasValue ?
                new ObjectParameter("Active_only", active_only) :
                new ObjectParameter("Active_only", typeof(bool));
    
            var orderedParameter = ordered.HasValue ?
                new ObjectParameter("Ordered", ordered) :
                new ObjectParameter("Ordered", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSections_Result>("GetSections", section_idParameter, active_onlyParameter, orderedParameter);
        }
    
        public virtual int NewSection(Nullable<int> module_id, string section, Nullable<int> user)
        {
            var module_idParameter = module_id.HasValue ?
                new ObjectParameter("Module_id", module_id) :
                new ObjectParameter("Module_id", typeof(int));
    
            var sectionParameter = section != null ?
                new ObjectParameter("Section", section) :
                new ObjectParameter("Section", typeof(string));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewSection", module_idParameter, sectionParameter, userParameter);
        }
    
        public virtual int UpdateSection(Nullable<int> section_id, Nullable<int> user, string name, Nullable<int> module_id, Nullable<bool> enabled)
        {
            var section_idParameter = section_id.HasValue ?
                new ObjectParameter("Section_id", section_id) :
                new ObjectParameter("Section_id", typeof(int));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var module_idParameter = module_id.HasValue ?
                new ObjectParameter("Module_id", module_id) :
                new ObjectParameter("Module_id", typeof(int));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSection", section_idParameter, userParameter, nameParameter, module_idParameter, enabledParameter);
        }
    
        public virtual ObjectResult<sp_UpdateSectionOrder_Result> UpdateSectionOrder(Nullable<int> section_id, Nullable<int> module_id, Nullable<int> user, Nullable<int> old_Order, Nullable<int> new_Order)
        {
            var section_idParameter = section_id.HasValue ?
                new ObjectParameter("Section_id", section_id) :
                new ObjectParameter("Section_id", typeof(int));
    
            var module_idParameter = module_id.HasValue ?
                new ObjectParameter("Module_id", module_id) :
                new ObjectParameter("Module_id", typeof(int));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(int));
    
            var old_OrderParameter = old_Order.HasValue ?
                new ObjectParameter("Old_Order", old_Order) :
                new ObjectParameter("Old_Order", typeof(int));
    
            var new_OrderParameter = new_Order.HasValue ?
                new ObjectParameter("New_Order", new_Order) :
                new ObjectParameter("New_Order", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateSectionOrder_Result>("UpdateSectionOrder", section_idParameter, module_idParameter, userParameter, old_OrderParameter, new_OrderParameter);
        }
    
        public virtual ObjectResult<sp_CountSectionsByModule_Result> CountSectionsByModule(Nullable<int> module_id)
        {
            var module_idParameter = module_id.HasValue ?
                new ObjectParameter("Module_id", module_id) :
                new ObjectParameter("Module_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CountSectionsByModule_Result>("CountSectionsByModule", module_idParameter);
        }
    }
}
